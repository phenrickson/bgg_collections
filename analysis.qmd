---
title: "Examine Model"
format: 
        html:
                code-fold: true
                code-overflow: scroll
                code-summary: 'Show the code'
                self-contained: true
editor: source
---

# About

Inspecting results from a penalized regression trained to predict a Boardgamegeek collection.


```{css, echo = FALSE}
.scroll {
max-height: 800px;
overflow-y: scroll;
}

```

```{r}
#| label: setup
#| include: false

# load in dependencies from targets
targets::tar_load_globals()
targets::tar_source("src/visualization/inference.R")
targets::tar_source("src/visualization/tables.R")

library(gt)
library(gtExtras)
library(ggrepel)

display_preds = function(preds,
                         digits =2) {
        
        preds |>
                select(yearpublished, game_id, name, .pred_yes, own) |>
                mutate_if(is.numeric, round, digits) |>
                as.data.frame()
}

```

```{r}
#| label: objects

tar_load(valid_split)
tar_load(tuned)
tar_load(final_fit)
tar_load(preds_tuned_best)
tar_load(preds_valid)
tar_load(preds_test)
tar_load(metrics_valid)
tar_load(games)

theme_set(
        theme_bgg()
)

```

# Tuning

Results from tuning model over resamples.

# Metrics

Results on validation set

```{r}

metrics_valid |>
        mutate_if(is.numeric, round, 3) |>
        as.data.frame() |>
        gt::gt() |>
        gt::as_raw_html()

```

# Coefficients

Trace plot of coefficients over regularization path.

```{r}
#| label: trace plot
#| warning: false
#| message: false

final_fit |>
        trace_plot.glmnet(max.overlaps = 30)

```

Top positive and negative features and their impact on the outcome.

```{r}
#| label: top positive and negative features
#| fig-height: 7

final_fit |>
        get_coefs.glmnet() |>
        top_coefs_by_sign() |>
        coef_plot.glmnet()

```

## Effects by Group

Look at the top positive and negative effects from specific groups of predictors.

```{r}
#| label: plot effects by group
#| class: scroll
#| fig-height: 4

coefs =
        final_fit |>
        get_coefs.glmnet()

plots =
        map(
                c('mechanics', 'designers', 'artists', 'publishers', 'categories', 'themes', 'components'),
                ~ coefs |>
                        mutate(term = gsub("themes_theme", "themes_")) |>
                        coef_plot_by_group(group = .x,
                                           shrink = F,
                                           scales = "free")
        )

walk(plots,
     print)

```

# Games

## Training

What were the top games from resampling?

```{r}
#| class: scroll

preds_tuned_best|>
        head(100) |>
        prep_predictions_tbl(
                games = games
        ) |>
        gt_predictions()

```

## Validation

What were the top games from the validation set?

```{r}
#| class: scroll
preds_valid |>
        head(100) |>
        prep_predictions_tbl(
                games = games
        ) |>
        gt_predictions()
```


## Upcoming

What were the top upcoming games?

```{r}
#| class: scroll
preds_test |>
        prep_predictions_tbl(
                games = games
        ) |>
        left_join(
                games |> 
                        select(game_id, usersrated),
                by = join_by(game_id)
        ) |>
        filter(usersrated >= 5) |>
        mutate(rank = row_number()) |>
        gt_predictions()

```